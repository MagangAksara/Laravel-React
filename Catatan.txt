ini controller saya sekarang
public function indexCustomer()
    {
        $cars = Car::paginate(18);

        // Transform hanya pada data, pagination meta tetap ada
        $cars->getCollection()->transform(function ($car) {
            return [
                // komponen utama
                'id' => $car->id,
                'brand' => $car->brand->name ?? '-',
                'model' => $car->model->name ?? '-',
                'type' => $car->type->name ?? '-',
                'image_url' => $car->main_image,
                'type_transmisi' => $car->transmission->name ?? '-',
                'fuel_type' => $car->fuelType->name ?? '-',
                'color' => $car->color->name ?? '-',
                'capacity' => $car->capacity,
                'price' => $car->price_per_day,
                // komponen filter
                'is_available' => $car->is_available,
                // komponen filter terhubung dengan rental
                'rentals' => $car->rentals->map(function ($rental) {
                    return [
                        'start_date' => $rental->start_date,
                        'end_date'   => $rental->end_date,
                        'status'     => $rental->status,
                    ];
                }),
                // komponen filter terhubung dengan user
                // 'owner_city' => $car->user->addresses->city ?? '-',
            ];
        });

        dd($cars);

        return Inertia::render('Customer/Konten/Dashboard', [
            'cars' => $cars,
        ]);
    }

kondisi models
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;

/**
 * @mixin IdeHelperCar
 */
class Car extends Model
{
    use HasFactory;

    protected $fillable = [
        'user_id',
        'car_brand_id',
        'car_model_id',
        'car_type_id',
        'car_color_id',
        'car_fuel_type_id',
        'car_transmission_id',
        'main_image',
        'plate_number',
        'capacity',
        'year',
        'description',
        'price_per_day',
        'is_available',
    ];

    public function user()
    {
        return $this->belongsTo(User::class);
    }
    
    public function rentals()
    {
        return $this->hasMany(Rental::class );
    }

    // cars variable
    public function brand()
    {
        return $this->belongsTo(CarBrand::class, 'car_brand_id');
    }

    public function model()
    {
        return $this->belongsTo(CarModel::class, 'car_model_id');
    }

    public function type()
    {
        return $this->belongsTo(CarType::class, 'car_type_id');
    }

    public function imagePath()
    {
        return $this->hasMany(CarImage::class);
    }

    public function color()
    {
        return $this->belongsTo(CarColor::class, 'car_color_id');
    }

    public function fuelType()
    {
        return $this->belongsTo(CarFuelType::class, 'car_fuel_type_id');
    }

    public function transmission()
    {
        return $this->belongsTo(CarTransmission::class, 'car_transmission_id');
    }
}

<?php

namespace App\Models;

// use Illuminate\Contracts\Auth\MustVerifyEmail;
use Laravel\Sanctum\HasApiTokens;
use Spatie\Permission\Traits\HasRoles;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Illuminate\Database\Eloquent\Factories\HasFactory;

/**
 * @mixin IdeHelperUser
 */
class User extends Authenticatable
{
    /** @use HasFactory<\Database\Factories\UserFactory> */
    use HasApiTokens, HasFactory, Notifiable, HasRoles;

    /**
     * The attributes that are mass assignable.
     *
     * @var list<string>
     */
    protected $fillable = [
        'name',
        'email',
        'email_verified_at',
        'password',
        'phone_number',
        'profile_picture',
        'is_driver',
    ];

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var list<string>
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * Get the attributes that should be cast.
     *
     * @return array<string, string>
     */
    protected function casts(): array
    {
        return [
            'email_verified_at' => 'datetime',
            'password' => 'hashed',
        ];
    }

    // Relationships
    public function address()
    {
        return $this->hasOne(UserAddress::class);
    }

    public function addresses()
    {
        return $this->hasMany(UserAddress::class, 'user_id');
    }

    public function firstAddress()
    {
        return $this->hasOne(UserAddress::class, 'user_id')->orderBy('id', 'asc');
    }

    public function cars()
    {
        return $this->hasMany(Car::class);
    }

    public function rentals()
    {
        return $this->hasMany(Rental::class);
    }

    public function reviews()
    {
        return $this->hasMany(Review::class);
    }
}


<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

/**
 * @mixin IdeHelperUserAddress
 */
class UserAddress extends Model
{
    protected $table = 'user_addresses';

    protected $fillable = [
        'user_id',
        'city',
        'district',
        'regency',
        'province',
        'postal_code',
        'latitude',
        'longitude',
        'detail',
        'is_active',
    ];

    public function user()
    {
        return $this->belongsTo(User::class);
    }
}

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

/**
 * @mixin IdeHelperRental
 */
class Rental extends Model
{
    protected $fillable = [
        'user_id',
        'car_id',
        'payment_id',
        'start_date',
        'end_date',
        'total_price',
        'status',
    ];

    const STATUS_PENDING_PAYMENT            = 'pending_payment'; // status awal, kondisi status payment pending
    const STATUS_CONFIRMED_PAYMENT          = 'confirmed_payment'; // kondisi status payment paid
    const STATUS_PAYMENT_RECEIVED           = 'payment_received'; // kondisi status payment settled, status untuk owner memberitahu bahwa pembayaran telah diterima
    const STATUS_EXPIRED                    = 'expired'; // kondisi status payment expired
    const STATUS_CANCELLED                  = 'cancelled'; // kondisi status payment unpaid
    const STATUS_ON_RENT                    = 'on_rent'; // status yang diatur manual, bukan berasal dari status xendit
    const STATUS_WAITING_FOR_CHECK          = 'waiting_for_check'; // status yang diatur manual, bukan berasal dari status xendit
    const STATUS_WAITING_FOR_FINES_PAYMENT  = 'waiting_for_fines_payment'; // status yang diatur manual, bukan berasal dari status xendit
    const STATUS_COMPLETED                  = 'completed'; // status yang diatur manual, bukan berasal dari status xendit
    const STATUS_FAILED                     = 'failed'; // status yang diatur manual, bukan berasal dari status xendit
    // const STATUS_RETURNED                  = 'returned'; // status untuk owner -> diatur manual, tampil saat customer melakukan cencelled

    protected $casts = [
        'start_date'  => 'date',
        'end_date'    => 'date',
        'total_price' => 'integer',
    ];

    public function user()
    {
        return $this->belongsTo(User::class);
    }

    public function car()
    {
        return $this->belongsTo(Car::class);
    }

    public function payment()
    {
        return $this->belongsTo(Payment::class);
    }

    public function reviews()
    {
        return $this->hasMany(Review::class);
    }
}

kondisi view
import React from "react";
import Layout from "../Layout";
import FilterSidebar from "./DashboardComponent/FilterSidebar";
import CarCard from "./DashboardComponent/CarCard";
import { Head, Link as InertiaLink, usePage } from '@inertiajs/react';
import {
  Pagination,
  PaginationContent,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
} from "@/components/ui/pagination";

const Dashboard = () => {
  const { cars } = usePage().props;

  return (
    <>
      <Head title="Dashboard" />
      <Layout>
        <div className="flex items-start gap-6 p-6 bg-gray-50 min-h-screen">

          <FilterSidebar />

            <div className="flex-1 flex flex-col">

              {/* Grid Cars Card */}
              <div className="grid gap-6 flex-1 items-stretch grid-cols-[repeat(auto-fit,minmax(280px,1fr))]">
                {cars.data && cars.data.length > 0 ? (
                  cars.data.map((car, idx) => (
                    <InertiaLink
                      key={idx}
                      href={route('cars.show', car.id)}
                      className='block'
                    >
                      <CarCard {...car} />
                    </InertiaLink>
                  ))
                ) : (
                  <p className="text-gray-500 col-span-full">No cars available</p>
                )}
              </div>

              {/* Pagination */}
              {cars.last_page > 1 && (
                <div className="mt-6 flex justify-center">
                  <Pagination>
                    <PaginationContent>
                      {cars.prev_page_url && (
                        <PaginationItem>
                          <PaginationPrevious href={cars.prev_page_url} />
                        </PaginationItem>
                      )}

                      {Array.from({ length: cars.last_page }, (_, i) => (
                        <PaginationItem key={i}>
                          <PaginationLink
                            href={`?page=${i + 1}`}
                            isActive={cars.current_page === i + 1}
                          >
                            {i + 1}
                          </PaginationLink>
                        </PaginationItem>
                      ))}

                      {cars.next_page_url && (
                        <PaginationItem>
                          <PaginationNext href={cars.next_page_url} />
                        </PaginationItem>
                      )}
                    </PaginationContent>
                  </Pagination>
                </div>
              )}

            </div>
        </div>
      </Layout>
    </>
  );
}

export default Dashboard;

import React from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Switch } from "@/components/ui/switch";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import RentalDateRange from "./RentalDateRange";

const FilterSidebar = () => {
  return (
    <>
      <div className="flex flex-col gap-6 h-auto">
        {/* <div className="w-64 p-4 bg-white rounded-xl shadow-sm border h-auto"> */}
        <RentalDateRange />

        {/* </div> */}
        <div className="w-64 p-4 bg-white rounded-xl shadow-sm border h-auto">
          {/* Brand */}
          <div className="mb-4">
            <Label className="text-base font-semibold">Brand</Label>
            <div className="flex flex-wrap gap-2 mt-2">
              {["Lexus", "Nissan", "Honda", "Daihatsu", "Suzuki"].map((brand) => (
                <Button
                  key={brand}
                  variant="outline"
                  size="sm"
                  className="rounded-full"
                >
                  {brand}
                </Button>
              ))}
              <Button variant="link" size="sm" className="text-blue-500">See More</Button>
            </div>
          </div>

          {/* Location */}
          <div className="mb-4">
            <Label className="text-base font-semibold">Location</Label>
            <div className="flex flex-wrap gap-2 mt-2">
              {["Malang", "Jember", "Lumajang", "Solo", "Jakarta", "Yogyakarta"].map((loc) => (
                <Button
                  key={loc}
                  variant="outline"
                  size="sm"
                  className="rounded-full"
                >
                  {loc}
                </Button>
              ))}
              <Button variant="link" size="sm" className="text-blue-500">See More</Button>
            </div>
          </div>

          {/* Transmission */}
          <div className="mb-4">
            <Label className="text-base font-semibold">Transmission</Label>
            <RadioGroup defaultValue="manual" className="mt-2">
              <div className="flex items-center space-x-2">
                <RadioGroupItem value="manual" id="manual" />
                <Label htmlFor="manual">Manual</Label>
              </div>
              <div className="flex items-center space-x-2">
                <RadioGroupItem value="automatic" id="automatic" />
                <Label htmlFor="automatic">Automatic</Label>
              </div>
            </RadioGroup>
          </div>

          {/* Seat */}
          <div className="mb-4">
            <Label className="text-base font-semibold">Seat</Label>
            <Input
              type="number"
              placeholder="5"
              className="mt-2"
              min={1}
              max={99}
              maxLength={2}
              onInput={e => {
                // Allow empty value
                if (e.target.value === "") return;
                if (e.target.value.length > 2) {
                  e.target.value = e.target.value.slice(0, 2);
                }
                if (Number(e.target.value) < 1) e.target.value = 1;
              }}
            />
          </div>

          {/* Fuel */}
          <div className="mb-4">
            <Label className="text-base font-semibold">Fuel</Label>
            <RadioGroup defaultValue="petrol" className="mt-2">
              <div className="flex items-center space-x-2">
                <RadioGroupItem value="petrol" id="petrol" />
                <Label htmlFor="petrol">Petrol</Label>
              </div>
              <div className="flex items-center space-x-2">
                <RadioGroupItem value="diesel" id="diesel" />
                <Label htmlFor="diesel">Diesel</Label>
              </div>
            </RadioGroup>
          </div>

          {/* Available */}
          <div className="mb-4 flex items-center justify-between">
            <Label className="text-base font-semibold">Available Now Only</Label>
            <Switch defaultChecked />
          </div>

          {/* Price */}
          <div className="mb-4">
            <Label className="text-base font-semibold">Price</Label>
            <div className="flex gap-2 mt-2">
              <Input type="number" placeholder="Min" />
              <Input type="number" placeholder="Max" />
            </div>
          </div>
        </div>
      </div>
    </>
  );
}

export default FilterSidebar;

import { useState, useEffect } from "react"
import { Calendar } from "@/components/ui/calendar"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"
import { Button } from "@/components/ui/button"
import { CalendarIcon } from "lucide-react"

const RentalDateRange = ({ startDate: initialStart = null, endDate: initialEnd = null, onChange }) => {
  const [startDate, setStartDate] = useState(initialStart);
  const [endDate, setEndDate] = useState(initialEnd);

  const formatDateTime = (date) => {
    if (!date) return "Date & Time"
    return date.toLocaleString("en-US", {
      month: "short",
      day: "numeric",
      year: "numeric",
      hour: "numeric",
      minute: "2-digit",
    })
  }

  // when local dates change, emit ISO strings (or null) to parent
  useEffect(() => {
    if (typeof onChange === "function") {
      onChange({
        start_date: startDate ? startDate.toISOString() : null,
        end_date: endDate ? endDate.toISOString() : null,
      });
    }
  }, [startDate, endDate, onChange]);

  const handleTimeChange = (date, setDate) => (e) => {
    if (date) {
      const [h, m] = e.target.value.split(":")
      const newDate = new Date(date)
      newDate.setHours(h, m)
      setDate(newDate)
    }
  }

  return (
    <div className="w-64 p-4 bg-white rounded-xl shadow-sm border">
      <h2 className="font-semibold mb-4">Available From</h2>
      <div className="grid grid-cols-2 gap-2">
        {/* Rental Start */}
        <div className="flex flex-col">
          <span className="text-xs text-gray-500 mb-1">Rental Start</span>
          <Popover>
            <PopoverTrigger asChild>
              <Button
                variant="outline"
                className="justify-center text-left font-normal text-xs truncate p-0 m-0"
              >
                <CalendarIcon />
                {formatDateTime(startDate)}
              </Button>
            </PopoverTrigger>
            <PopoverContent className="w-auto p-2">
              <Calendar
                mode="single"
                selected={startDate}
                onSelect={setStartDate}
                initialFocus
              />
              <input
                type="time"
                className="mt-2 w-full border rounded p-1 text-sm"
                onChange={handleTimeChange(startDate, setStartDate)}
              />
            </PopoverContent>
          </Popover>
        </div>

        {/* Rental End */}
        <div className="flex flex-col">
          <span className="text-xs text-gray-500 mb-1">Rental End</span>
          <Popover>
            <PopoverTrigger asChild>
              <Button
                variant="outline"
                className="justify-center text-left font-normal text-xs truncate p-0 m-0"
              >
                <CalendarIcon />
                {formatDateTime(endDate)}
              </Button>
            </PopoverTrigger>
            <PopoverContent className="w-auto p-2">
              <Calendar
                mode="single"
                selected={endDate}
                onSelect={setEndDate}
                initialFocus
              />
              <input
                type="time"
                className="mt-2 w-full border rounded p-1 text-sm"
                onChange={handleTimeChange(endDate, setEndDate)}
              />
            </PopoverContent>
          </Popover>
        </div>
      </div>
    </div>
  )
}

export default RentalDateRange;

import React from "react";
import { MapPin } from "lucide-react";

export default function CarCard({ image_url, brand, model, type, price, type_transmisi, capacity, fuel_type }) {
  return (
    <div className="bg-white rounded-xl shadow-sm border overflow-hidden h-full max-w-sm">
      <img 
        src={image_url} 
        alt={`${brand} ${model} ${type}`} 
        className="w-full h-48 object-cover" 
      />
      <div className="p-4 flex flex-col flex-grow">
        <h3 className="font-semibold text-lg">{brand} {model} {type}</h3>
        <p className="text-xl font-semibold text-gray-700 mt-1">
          {new Intl.NumberFormat('id-ID', {
            style: 'currency',
            currency: 'IDR',
            minimumFractionDigits: 0
          }).format(price)}/day
        </p>
        <div className="flex items-center gap-1 text-sm text-gray-500 mt-1">
          <MapPin size={16} /> Malang
        </div>
        <div className="flex-grow" />
          <div className="flex justify-between items-center mt-3 text-sm font-medium">
            <span>⚙️ {type_transmisi}</span>
            <span>🚗 {capacity}</span>
            <span>⛽ {fuel_type}</span>
          </div>
      </div>
    </div>
  );
}
