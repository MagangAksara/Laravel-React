ini kode saya dari controller
<?php

namespace App\Http\Controllers\API;

use App\Http\Controllers\Controller;
use App\Models\Payment;
use Illuminate\Http\Request;
use App\Models\Rental;
use Carbon\Carbon;
use Illuminate\Support\Facades\Auth;

class RentalController extends Controller
{
    public function store(Request $request)
    {
        $request->validate([
            'car_id'       => 'required|exists:cars,id',
            'start_date'   => 'required|date',
            'end_date'     => 'required|date|after:start_date',
            'total_price'  => 'required|numeric|min:1000',
        ]);

        $userId = Auth::id();

        $payment = Payment::latest()->first();

        $startDate = Carbon::parse($request->start_date)->format('Y-m-d H:i:s');
        $endDate   = Carbon::parse($request->end_date)->format('Y-m-d H:i:s');

        if (!$payment) {
            return response()->json([
                'message' => 'Payment not found'
            ], 400);
        }

        $rental = Rental::create([
            'user_id'     => $userId,
            'car_id'      => $request->car_id,
            'payment_id'  => $payment->id,
            'pickup_location_id' => $payment->pickup_location_id,
            'start_date'  => $startDate,
            'end_date'    => $endDate,
            'total_price' => $request->total_price,
        ]);

        return response()->json([
            'message' => 'Rental berhasil dibuat',
            'data'    => $rental
        ], 201);
    }
}

pageview
// resources/js/Pages/Customer/Booking.jsx
import React, { useState, useEffect } from "react";
import { Head, usePage } from "@inertiajs/react";
import Layout from "../Layout";

import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import ConfirmFilter from "./BookingComponent/ConfirmFilter";
import DetailPrice from "./BookingComponent/DetailPrice";
import ReadyToPay from "./BookingComponent/ReadyToPay";
import DateTime from "./BookingComponent/DateTime";
import { Card } from "@/Components/ui/card";

import HandlePayNow from "./BookingComponent/Handle/HandlePayNow";


const Booking = () => {
  // Ambil data dari Laravel controller lewat Inertia props
  const { car, ownerAddress, customerEmail, customerAddress, blockedRange } = usePage().props;

  // State untuk tanggal
  const [startDate, setStartDate] = useState(null);
  const [endDate, setEndDate] = useState(null);
  const [loading, setLoading] = useState(false);
  // state untuk popup dialog
  const [showDialog, setShowDialog] = useState(false);
  const [dialogMessage, setDialogMessage] = useState("");

  const handlePayNowClick = () => {
    if (!startDate || !endDate) {
      setDialogMessage("Silakan isi tanggal mulai dan tanggal selesai terlebih dahulu.");
      setShowDialog(true);
      return;
    }

    if (blockedRange) {
      const rangeStart = new Date(blockedRange.start);
      const rangeEnd = new Date(blockedRange.end);

      // cek overlap dengan rentang terblokir
      if (
        (startDate >= rangeStart && startDate <= rangeEnd) ||
        (endDate >= rangeStart && endDate <= rangeEnd)
      ) {
        setDialogMessage("Mobil sedang sibuk pada rentang tanggal ini. Ubah waktu atau pilih mobil lain.");
        setShowDialog(true);
        return;
      }
    }

    // Jika semua valid, panggil HandlePayNow
    HandlePayNow({ car, customerEmail, setLoading, totalPayment, startDate, endDate });
  };

  // State untuk driver dan pickup (dipindahkan dari ConfirmFilter)
  const [pickupOption, setPickupOption] = useState("owner");
  const [selectedAddress, setSelectedAddress] = useState(
    customerAddress?.[0]?.id?.toString() || ""
  );

  const [driverOption, setDriverOption] = useState("self-drive");

  useEffect(() => {
    if (car.is_driver) {
      setDriverOption("self-drive");
    } else {
      setDriverOption("self-drive");
    }
  }, [car.is_driver]);

  const [totalPayment, setTotalPayment] = useState(0);

  return (
    <>
      <Head title="Booking" />
      <div className="min-h-screen bg-[#f8fcff]">
        <Layout>
          {/* Main Content */}
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 p-6 max-w-7xl mx-auto">
            {/* Left Column */}
            <div className="lg:col-span-2 space-y-6">
              {/* Date & Time */}
              <DateTime
                car={car}
                startDate={startDate}
                setStartDate={setStartDate}
                endDate={endDate}
                setEndDate={setEndDate}
                blockedRange={blockedRange}
              />

              {/* Driver */}
              <ConfirmFilter
                car={car}
                customer_addresses={customerAddress}
                driverOption={driverOption}
                setDriverOption={setDriverOption}
                pickupOption={pickupOption}
                setPickupOption={setPickupOption}
                selectedAddress={selectedAddress}
                setSelectedAddress={setSelectedAddress}
              />
            </div>

            {/* Right Column */}
            <Card>
              <div>
                {/* Summary */}
                <DetailPrice
                  car={car}
                  startDate={startDate}
                  endDate={endDate}
                  ownerAddress={ownerAddress}
                  customerAddress={customerAddress}
                  driverOption={driverOption}
                  pickupOption={pickupOption}
                  selectedAddress={selectedAddress}
                  setTotalPayment={setTotalPayment}
                />

                {/* Payment */}
                <ReadyToPay
                  loading={loading}
                  onPayNow={handlePayNowClick}
                />
              </div>
            </Card>
          </div>
        </Layout>
      </div>
      {/* Dialog popup */}
      <Dialog open={showDialog} onOpenChange={setShowDialog}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Perhatian</DialogTitle>
          </DialogHeader>
          <p>{dialogMessage}</p>
        </DialogContent>
      </Dialog>
    </>
  );
}

export default Booking;

import React from "react";
import { Card, CardContent } from "@/components/ui/card";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Label } from "@/components/ui/label";

const ConfirmFilter = ({
    car,
    customer_addresses,
    driverOption,
    setDriverOption,
    pickupOption,
    setPickupOption,
    selectedAddress,
    setSelectedAddress,
}) => {

    return (
        <Card>
            <CardContent className="p-6 space-y-6">
                {/* Driver */}
                <div>
                    <Label className="mb-2 block">Driver</Label>
                    <RadioGroup
                        value={driverOption}
                        onValueChange={setDriverOption}
                        defaultValue="self-drive"
                        className="flex gap-6"
                    >
                        {/* Self Drive selalu ada */}
                        <div className="flex items-center space-x-2">
                            <RadioGroupItem value="self-drive" id="self-drive" />
                            <Label htmlFor="self-drive">Self Drive</Label>
                        </div>

                        {/* With Driver hanya kalau owner adalah driver */}
                        <div
                            className={`flex items-center space-x-2 ${
                                !car.is_driver ? "opacity-50 cursor-not-allowed" : ""
                            }`}
                        >
                            <RadioGroupItem
                                value="with-driver"
                                id="with-driver"
                                disabled={!car.is_driver}
                            />
                            <Label
                                htmlFor="with-driver"
                                className={!car.is_driver ? "pointer-events-none" : ""}
                            >
                                With Driver{" "}
                                <span className="text-gray-500">
                                    Rp {car.driver_fee.toLocaleString()}
                                </span>
                            </Label>
                        </div>
                    </RadioGroup>
                </div>

                {/* Pick-Up */}
                <div>
                    <Label className="mb-2 block">Pick-Up Location</Label>
                    <RadioGroup
                        value={pickupOption}
                        onValueChange={(val) => {
                            if (driverOption === "self-drive" && val === "other") return;
                            setPickupOption(val);
                        }}
                        className="flex gap-6"
                    >
                        {/* At owner Location */}
                        <div className="flex items-center space-x-2">
                            <RadioGroupItem value="owner" id="pickup-owner" />
                            <Label htmlFor="pickup-owner">At Owner’s Location</Label>
                        </div>
                        {/* At Other Location */}
                        <div
                            className={`flex items-center space-x-2 ${
                                driverOption === "self-drive" ? "opacity-50 cursor-not-allowed" : ""
                            }`}
                        >
                            <RadioGroupItem
                                value="other"
                                id="pickup-other"
                                disabled={driverOption === "self-drive"}
                            />
                            <Label
                                htmlFor="pickup-other"
                                className={driverOption === "self-drive" ? "pointer-events-none" : ""}
                            >
                                At Other Location
                            </Label>
                        </div>
                    </RadioGroup>
                        {pickupOption === "other" && (
                            <div className="mt-4 border p-4 rounded-lg">
                                {customer_addresses?.length > 0 ? (
                                    <RadioGroup
                                        value={selectedAddress}
                                        onValueChange={setSelectedAddress}
                                        className="space-y-3"
                                    >
                                        {customer_addresses.map((addr) => (
                                            <div
                                                key={addr.id}
                                                className="flex items-start space-x-3 p-3 rounded-lg border hover:bg-gray-50 transition"
                                            >
                                                <RadioGroupItem 
                                                    value={addr.id.toString()} 
                                                    id={`address-${addr.id}`} 
                                                    className="mt-1"
                                                />
                                                <Label 
                                                    htmlFor={`address-${addr.id}`} 
                                                    className="cursor-pointer flex flex-col"
                                                >
                                                    <p className="text-sm text-gray-800">
                                                        Kota: {addr.city},  Kecamatan: {addr.district}, Kabupaten: {addr.regency}, Provinsi: {addr.province}, ({addr.postal_code})
                                                    </p>
                                                    <p className="text-sm text-gray-600">
                                                        Latitude: {addr.latitude}, Longitude: {addr.longitude}
                                                    </p>
                                                    <p className="text-sm">{addr.detail}</p>
                                                </Label>
                                            </div>
                                        ))}
                                    </RadioGroup>
                                ) : (
                                    <p className="text-sm text-gray-500">Tidak ada alamat tersimpan.</p>
                                )}
                            </div>
                        )}
                    </div>
            </CardContent>
        </Card>
    );
};

export default ConfirmFilter;

import React, { useEffect } from "react";
import { Label } from "@/components/ui/label";
import { Button } from "@/components/ui/button";
import { Calendar } from "@/components/ui/calendar";
import { Card, CardContent } from "@/components/ui/card";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";

import { CalendarIcon, ChevronsRight } from "lucide-react";
import { calculateDuration } from "./Handle/DurationHendle";

const DateTime = ({ startDate, setStartDate, endDate, setEndDate, blockedRange }) => {

  // set default start & end kalau masih kosong
  useEffect(() => {
    if (!startDate) {
      const now = new Date();
      const plus2h = new Date(now.getTime() + 2 * 60 * 60 * 1000);
      setStartDate(plus2h);

      if (!endDate) {
        const plus24h = new Date(now.getTime() + 28 * 60 * 60 * 1000);
        setEndDate(plus24h);
      }
    }
  }, [startDate, endDate, setStartDate, setEndDate]);

  const formatDateTime = (date) => {
    if (!date) return "Date & Time";
    return date.toLocaleString("en-US", {
      month: "short",
      day: "numeric",
      year: "numeric",
      hour: "numeric",
      minute: "2-digit",
    });
  };

  // helper to get HH:MM for input value
  const timeValue = (date) =>
    date ? date.toTimeString().substring(0, 5) : "";

  const isBlockedDate = (date) => {
    if (!blockedRange) return false;
    const rangeStart = new Date(blockedRange.start);
    const rangeEnd = new Date(blockedRange.end);
    return date >= rangeStart && date <= rangeEnd;
  };

  // jika date null, buat new Date() agar time bisa di-set dulu
  const handleTimeChange = (currentDate, setDate, isStart = false) => (e) => {
    const val = e.target.value; // "HH:MM"
    if (!val) return;
    const [h, m] = val.split(":").map((v) => parseInt(v, 10));
    const newDate = currentDate ? new Date(currentDate) : new Date();
    newDate.setHours(h, m, 0, 0);
    setDate(newDate);

    // Jika ini perubahan di startDate, endDate ikut maju 1 jam dari startDate
    if (isStart) {
      const newEnd = new Date(newDate);
      newEnd.setHours(newDate.getHours() + 1);
      setEndDate(newEnd);
    }
  };

  const handleDateSelect = (currentDate, setDate) => (selectedDate) => {
    if (!selectedDate) return;
    const newDate = new Date(selectedDate);
    if (currentDate) {
      // Ambil jam & menit dari date lama
      newDate.setHours(currentDate.getHours(), currentDate.getMinutes());
    } else {
      // Kalau belum ada date lama, pakai jam sekarang
      const now = new Date();
      newDate.setHours(now.getHours(), now.getMinutes());
    }
    setDate(newDate);
  };

  const duration = calculateDuration(startDate, endDate);

  return (
    <>
      <Card>
        <CardContent className="flex flex-row justify-center items-center gap-20 p-6">
          {/* <div className="flex flex-col gap-2"> */}
          <div className="flex flex-col justify-center items-center">
            <Label>Rental Start Date & Time</Label>
            <Popover>
              <PopoverTrigger asChild>
                <Button variant="outline" className="justify-center font-normal text-sm w-auto rounded-full">
                  <CalendarIcon /> {formatDateTime(startDate)}
                </Button>
              </PopoverTrigger>
              <PopoverContent className="w-auto p-2">
                <Calendar
                  mode="single"
                  selected={startDate}
                  onSelect={handleDateSelect(startDate, setStartDate)}
                  initialFocus
                  disabled={(date) => isBlockedDate(date) || date < new Date()}
                />
                <input
                  type="time"
                  className="mt-2 w-full border rounded p-1 text-sm"
                  value={timeValue(startDate)}
                  onChange={handleTimeChange(startDate, setStartDate, true)}
                />
              </PopoverContent>
            </Popover>
          </div>

          <ChevronsRight />

          <div className="flex flex-col justify-center items-center">
            <Label>Rental End Date & Time</Label>
            <Popover>
              <PopoverTrigger asChild>
                <Button variant="outline" className="justify-center font-normal text-sm w-auto rounded-full">
                  <CalendarIcon /> {formatDateTime(endDate)}
                </Button>
              </PopoverTrigger>
              <PopoverContent className="w-auto p-2">
                <Calendar
                  mode="single"
                  selected={endDate}
                  onSelect={handleDateSelect(endDate, setEndDate)}
                  initialFocus
                  disabled={(date) => isBlockedDate(date) || date < new Date() || (endDate && date < endDate)}
                />
                <input
                  type="time"
                  className="mt-2 w-full border rounded p-1 text-sm"
                  value={timeValue(endDate)}
                  onChange={handleTimeChange(endDate, setEndDate)}
                />
              </PopoverContent>
            </Popover>
          </div>
          {/* </div> */}
        </CardContent>
      </Card>
    </>
  );
};

export default DateTime;

import React, { useEffect, useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Separator } from "@/components/ui/separator";
import { calculateDuration } from "./Handle/DurationHendle";
import axios from "axios";
import OwnerInformation from "./Handle/OwnerInformation";

const DetailPrice = ({ car, startDate, endDate, ownerAddress, customerAddress, driverOption, pickupOption, selectedAddress, setTotalPayment }) => {
    const duration = calculateDuration(startDate, endDate);

    const [pickupFee, setPickupFee] = useState(0);

    // Hitung pickup fee hanya jika with-driver dan pickupOption === "other"
    useEffect(() => {
        const fetchDistance = async () => {
            if (car.is_driver && driverOption === "with-driver" && pickupOption === "other" && selectedAddress) {
                try {
                    const customerAddr = customerAddress.find(addr => addr.id.toString() === selectedAddress);
                    if (!customerAddr || !ownerAddress) return;

                    const res = await axios.post("/api/calculatePickupFee", {
                        start_lat: ownerAddress.latitude,
                        start_lon: ownerAddress.longitude,
                        end_lat: customerAddr.latitude,
                        end_lon: customerAddr.longitude,
                    });

                    if (res.data && res.data.distance_km) {
                        // 5000 per meter => distance_km * 1000 meter
                        // karena sudah dari distance
                        setPickupFee(res.data.distance_km * 1000);
                    }
                } catch (err) {
                    console.error("Error fetching pickup fee:", err);
                }
            } else {
                setPickupFee(0);
            }
        };

        fetchDistance();
    }, [driverOption, pickupOption, selectedAddress, ownerAddress, customerAddress]);

    // Biaya sewa per hari × durasi
    const rentalFee = car.price_per_day * (duration?.totalDays) || car.price_per_day;

    // Driver fee default × durasi
    const driverFee = (car.is_driver && driverOption === "with-driver")
        ? car.driver_fee * (duration?.totalDays || 1)
        : 0;

    // Total pembayaran
    const totalPayment = rentalFee + driverFee + pickupFee;

    useEffect(() => {
        if (setTotalPayment) {
            setTotalPayment(totalPayment);
        }
    }, [totalPayment, setTotalPayment]);

    return (
        <>
            {/* <Card> */}
                <CardHeader>
                    <CardTitle className="mb-0 pb-0">
                        <OwnerInformation car={car}/>
                        <div className="flex text-lg">
                            <p>{car.brand} {car.model} {car.type}</p>
                            <p className="ml-1"> -- Rp {car.price_per_day.toLocaleString()}</p>
                        </div>
                    </CardTitle>
                </CardHeader>
                <CardContent className="space-y-2 mt-0">
                    <p>Duration Rental: {duration ? duration.text : "-"}</p>
                    <Separator />
                        <div className="flex justify-between">
                            <span>Biaya Sewa</span>
                            <span>Rp {rentalFee.toLocaleString()}</span>
                        </div>
                        <div className="flex justify-between">
                            <span>Driver Fee</span>
                            <span>Rp {driverFee.toLocaleString()}</span>
                        </div>
                        <div className="flex justify-between">
                            <span>Pick Up Location</span>
                            <span>Rp {pickupFee.toLocaleString()}</span>
                        </div>
                    <Separator />
                    <div className="flex justify-between font-bold">
                        <span>Total Payment</span>
                        <span>Rp {totalPayment.toLocaleString()}</span>
                    </div>
                    <p className="text-xs text-gray-500">
                        With driver bookings, meals, fuel, tolls, etc. are counted as additional costs not included in the system.
                    </p>
                </CardContent>
            {/* </Card> */}
        </>
    );
}

export default DetailPrice;

import React from "react";
import { CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";

const ReadyToPay = ({ loading, onPayNow }) => {

    return (
        <>
            <CardContent>
                <Button
                    className="w-full bg-[#1e6fa1] hover:bg-[#195b82]"
                    onClick={onPayNow}
                    disabled={loading}
                >
                    {loading ? "Processing..." : "Pay Now"}
                </Button>
            </CardContent>
        </>
    );
}

export default ReadyToPay;

// resources/js/Pages/Customer/BookingComponent/HandlePayNow.jsx
export default async function HandlePayNow({ car, customerEmail, setLoading, totalPayment, startDate, endDate }) {
  function getCookie(name) {
    const value = `; ${document.cookie}`;
    const parts = value.split(`; ${name}=`);
    if (parts.length === 2) return parts.pop().split(";").shift();
  }

  try {
    setLoading(true);

    // 1. Ambil CSRF cookie dari Laravel Sanctum
    await fetch("http://127.0.0.1:8000/sanctum/csrf-cookie", {
      method: "GET",
      credentials: "include",
    });

    // 2. Ambil nilai XSRF-TOKEN dari cookie browser
    const xsrfToken = getCookie("XSRF-TOKEN");

    // 3. Kirim request ke API untuk buat pembayaran
    const paymentResponse = await fetch("http://127.0.0.1:8000/api/payment/create", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json",
        "X-XSRF-TOKEN": decodeURIComponent(xsrfToken),
      },
      credentials: "include",
      body: JSON.stringify({
        amount: totalPayment, // ⬅️ pakai dari props
        description: `Rental ${car.brand} ${car.model}`,
        payer_email: customerEmail,
      }),
    });

    if (!paymentResponse.ok) {
      throw new Error(`HTTP error! Status: ${paymentResponse.status}`);
    }

    const paymentResult = await paymentResponse.json();

    // 4. Simpan rental ke database
    const rentalResponse = await fetch("http://127.0.0.1:8000/api/rental/store", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json",
        "X-XSRF-TOKEN": decodeURIComponent(xsrfToken),
      },
      credentials: "include",
      body: JSON.stringify({
        car_id: car.id,
        start_date: startDate,
        end_date: endDate,
        total_price: totalPayment,
      }),
    });

    if (!rentalResponse.ok) {
      throw new Error(`Gagal menyimpan rental! Status: ${rentalResponse.status}`);
    }

    // 5. Redirect ke Xendit checkout link
    if (paymentResult.checkout_link) {
      window.location.href = paymentResult.checkout_link;
    } else {
      alert("Gagal membuat pembayaran: checkout_link tidak ditemukan.");
    }
  } catch (error) {
    console.error("Payment/Rental error:", error);
    alert("Terjadi kesalahan saat proses pembayaran.");
  } finally {
    setLoading(false);
  }
}

kode models
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

/**
 * @mixin IdeHelperRental
 */
class Rental extends Model
{
    protected $fillable = [
        'user_id',
        'car_id',
        'payment_id',
        'pickup_location_id',
        'start_date',
        'end_date',
        'total_price',
        'status',
    ];

    // daftar status
    const STATUS_PENDING_PAYMENT            = 'pending_payment'; // status awal, kondisi status payment pending
    const STATUS_CONFIRMED_PAYMENT          = 'confirmed_payment'; // kondisi status payment paid
    const STATUS_PAYMENT_RECEIVED           = 'payment_received'; // kondisi status payment settled, status untuk owner memberitahu bahwa pembayaran telah diterima
    const STATUS_EXPIRED                    = 'expired'; // kondisi status payment expired
    const STATUS_CANCELLED                  = 'cancelled'; // kondisi status payment unpaid
    const STATUS_REFUNDED                   = 'refunded'; // kondisi status payment refunded 
    const STATUS_ON_RENT                    = 'on_rent'; // status yang diatur manual, bukan berasal dari status xendit
    const STATUS_WAITING_FOR_CHECK          = 'waiting_for_check'; // status yang diatur manual, bukan berasal dari status xendit
    const STATUS_WAITING_FOR_FINES_PAYMENT  = 'waiting_for_fines_payment'; // status yang diatur manual, bukan berasal dari status xendit
    const STATUS_COMPLETED                  = 'completed'; // status yang diatur manual, bukan berasal dari status xendit
    const STATUS_FAILED                     = 'failed'; // status yang diatur manual, bukan berasal dari status xendit
    // const STATUS_RETURNED                  = 'returned'; // status untuk owner -> diatur manual, tampil saat customer melakukan cencelled

    protected $casts = [
        'start_date'  => 'datetime:Y-m-d H:i:s',
        'end_date'    => 'datetime:Y-m-d H:i:s',
        'total_price' => 'integer',
    ];

    public function user()
    {
        return $this->belongsTo(User::class);
    }

    public function car()
    {
        return $this->belongsTo(Car::class);
    }

    public function payment()
    {
        return $this->belongsTo(Payment::class);
    }

    public function reviews()
    {
        return $this->hasMany(Review::class);
    }

    public function pickupLocation()
    {
        return $this->belongsTo(UserAddress::class);
    }
}

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

/**
 * @mixin IdeHelperUserAddress
 */
class UserAddress extends Model
{
    protected $table = 'user_addresses';

    protected $fillable = [
        'user_id',
        'city',
        'district',
        'regency',
        'province',
        'postal_code',
        'latitude',
        'longitude',
        'detail',
        'is_active',
    ];

    public function user()
    {
        return $this->belongsTo(User::class);
    }

    public function rental()
    {
        return $this->hasOne(Rental::class);
    }
}

